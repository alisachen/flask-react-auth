image: docker:stable

stages:
  - build-users
  - test-users
  - build-client
  - test-client
  - build-heroku

variables:
  IMAGE: ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}

build:
  stage: build-users
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker pull $IMAGE:users-compile-stage || true
    - docker pull $IMAGE:users-latest || true
    - docker build
        --target compile-image
        --cache-from $IMAGE:users-compile-stage
        --tag $IMAGE:users-compile-stage
        --file ./services/users/Dockerfile-prod
        "./services/users"
    - docker build
        --target runtime-image
        --cache-from $IMAGE:users-compile-stage
        --cache-from $IMAGE:users-latest
        --tag $IMAGE:users-latest
        --file ./services/users/Dockerfile-prod
        "./services/users"
    - docker push $IMAGE:users-compile-stage
    - docker push $IMAGE:users-latest

test-users:
  stage: test-users
  image: $IMAGE:users-latest
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: users
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: ""
    DATABASE_TEST_URL: postgres://runner@postgres:5432/users
    FLASK_ENV: development
  script:
    - cd /usr/src/app
    - pytest "project/tests" -p no:warnings
    - flake8 project
    - black project --check
    - isort project/**/*.py --check-only

build-client:
  stage: build-client
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    REACT_APP_USERS_SERVICE_URL: http://localhost:5001
  script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker pull $IMAGE:client || true
    - docker build
        --cache-from $IMAGE:client
        --tag $IMAGE:client
        --file ./services/client/Dockerfile-ci
        "./services/client"
    - docker push $IMAGE:client

test-client:
  stage: test-client
  image: $IMAGE:client
  script:
    - cd /usr/src/app
    - npm run formatfix:check
    - npm run lint
    - npm run test

build-heroku:
  stage: build-heroku
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    HEROKU_APP_NAME: thawing-crag-10777
    HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
  script:
    - apk add --no-cache curl
    - chmod +x ./release.sh
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker pull $IMAGE:build-react || true
    - docker pull $IMAGE:build-python || true
    - docker pull $IMAGE:production || true
    - docker build
        --target build-react
        --cache-from $IMAGE:build-react
        --tag $IMAGE:build-react
        --file ./Dockerfile-deploy
        "."
    - docker build
        --target build-python
        --cache-from $IMAGE:build-python
        --tag $IMAGE:build-python
        --file ./Dockerfile-deploy
        "."
    - docker build
        --target production
        --cache-from $IMAGE:production
        --tag $IMAGE:production
        --tag $HEROKU_REGISTRY_IMAGE
        --file ./Dockerfile-deploy
        "."
    - docker push $IMAGE:build-react
    - docker push $IMAGE:build-python
    - docker push $IMAGE:production
    - echo -n $HEROKU_AUTH_TOKEN | docker login -u _ --password-stdin registry.heroku.com
    - docker push $HEROKU_REGISTRY_IMAGE
    - ./release.sh
